"""
    Behavior Dialog Wrapper.
    This class has all the run time functionality for the swarm behavior
    popup dialog boxes.
    This class is edited by hand, while the individual dialog boxes
    (e.g., Ui_sequenceLandDialog.py) are auto-generated by QDesigner.

    Duane Davis (based on Michael Day's dashboardDialogWrapper pattern)
    June 2015
"""

from PyQt5.QtCore import QItemSelectionModel
from PyQt5.QtWidgets import QDialog, QTableWidgetItem, QTableWidgetSelectionRange
from PyQt5.QtGui import QBrush, QColor

from SwarmCommander.modules.sc_qt_gui.sequenceLandDialog import Ui_sequenceLandDialog
from SwarmCommander.modules.sc_qt_gui.fixedFormationDialog import Ui_fixedFormationDialog
from SwarmCommander.modules.sc_qt_gui.swarmSearchDialog import Ui_swarmSearchDialog
from SwarmCommander.modules.sc_qt_gui.greedyShooterDialog import Ui_greedyShooterDialog
from SwarmCommander.modules.sc_qt_gui.altitudeSorterDialog import Ui_altitudeSorterDialog
from SwarmCommander.modules.sc_qt_gui.latitudeLongitudeDialog import Ui_latitudeLongitudeDialog
from SwarmCommander.modules.sc_qt_gui.interceptDialog import Ui_interceptDialog
import ap_lib.ap_enumerations as enums
import time
import math
import os


# Parent class for other behavior dialog boxes
class BehaviorDialog(QDialog):

    def __init__(self, sc_state, parent_dialog):
        QDialog.__init__(self)

        self.sc_state = sc_state
        self.parent = parent_dialog

    def cancelOk_btn_reject(self):
        self.parent.behavior_order = None
        self.close()


# Dialog box for entering user-defined parameters
# for the Swarm Sequenced Landing behavior
class SequenceLandDialog(BehaviorDialog):

    def __init__(self, sc_state, parent_dialog):
        BehaviorDialog.__init__(self, sc_state, parent_dialog)

        self.__sequencedLandUi = Ui_sequenceLandDialog()
        self.__sequencedLandUi.setupUi(self)

        #slots
        self.__sequencedLandUi.btnbx_CancelOK.accepted.connect(self.cancelOk_btn_accept)
        self.__sequencedLandUi.btnbx_CancelOK.rejected.connect(self.cancelOk_btn_reject)

    def cancelOk_btn_accept(self):
        lnd_wpt = None
        if self.__sequencedLandUi.combo_landOption.currentText() == "Land A (East to West)":
            lnd_wpt = enums.LAND_A_WP
        elif self.__sequencedLandUi.combo_landOption.currentText() == "Land B (West to East)":
            lnd_wpt = enums.LAND_B_WP
        self.parent.behavior_order = lnd_wpt
        self.close()


# Dialog box for entering user-defined parameters
# for the Fixed Formation behavior
class FixedFormationDialog(BehaviorDialog):

    def __init__(self, sc_state, parent_dialog):
        BehaviorDialog.__init__(self, sc_state, parent_dialog)

        self.__fixedFormationUi = Ui_fixedFormationDialog()
        self.__fixedFormationUi.setupUi(self)

        #slots
        self.__fixedFormationUi.btnbx_CancelOK.accepted.connect(self.cancelOk_btn_accept)
        self.__fixedFormationUi.btnbx_CancelOK.rejected.connect(self.cancelOk_btn_reject)

    def cancelOk_btn_accept(self):
        distance = self.__fixedFormationUi.spn_distance.value()
        angle = math.radians(self.__fixedFormationUi.spn_angle.value())
        stack = self.__fixedFormationUi.radio_stackFormation.isChecked()
        self.parent.behavior_order = ( distance, angle, stack )
        self.close()

# Dialog box for entering user-defined parameters
# for the Swarm Search behavior
class SwarmSearchDialog(BehaviorDialog):

    def __init__(self, sc_state, parent_dialog):
        BehaviorDialog.__init__(self, sc_state, parent_dialog)

        self.__swarmSearchUi = Ui_swarmSearchDialog()
        self.__swarmSearchUi.setupUi(self)

        #slots
        self.__swarmSearchUi.btnbx_CancelOK.accepted.connect(self.cancelOk_btn_accept)
        self.__swarmSearchUi.btnbx_CancelOK.rejected.connect(self.cancelOk_btn_reject)

    def cancelOk_btn_accept(self):
        searchAreaLength = self.__swarmSearchUi.doubleSpinBox_Length.value()
        searchAreaWidth = self.__swarmSearchUi.doubleSpinBox_Width.value()
        lat = self.__swarmSearchUi.doubleSpinBox_Lat.value()
        lon = self.__swarmSearchUi.doubleSpinBox_Lon.value()
        masterSearcherID = self.__swarmSearchUi.masterID_spinBox.value()
        searchAlgoEnum = self.__swarmSearchUi.searchAlgo_spinBox.value()

        self.parent.behavior_order = ( searchAreaLength, searchAreaWidth, lat, lon, masterSearcherID, searchAlgoEnum )
        self.close()

# Dialog box for entering user-defined parameters
# for the Greedy Shooter behavior
class GreedyShooterDialog(BehaviorDialog):

    def __init__(self, sc_state, parent_dialog):
        BehaviorDialog.__init__(self, sc_state, parent_dialog)

        self.__greedyShooterUi = Ui_greedyShooterDialog()
        self.__greedyShooterUi.setupUi(self)

        #slots
        self.__greedyShooterUi.btnbx_CancelOK.accepted.connect(self.cancelOk_btn_accept)
        self.__greedyShooterUi.btnbx_CancelOK.rejected.connect(self.cancelOk_btn_reject)

    def cancelOk_btn_accept(self):
        self.parent.behavior_order = True
        self.close()

# Dialog box for entering user-defined parameters
# for the Altitude Sorter behaviors
class AltitudeSorterDialog(BehaviorDialog):

    def __init__(self, sc_state, parent_dialog):
        BehaviorDialog.__init__(self, sc_state, parent_dialog)

        self.__altitudeSorterUi = Ui_altitudeSorterDialog()
        self.__altitudeSorterUi.setupUi(self)

        #slots
        self.__altitudeSorterUi.btnbx_CancelOK.accepted.connect(self.cancelOk_btn_accept)
        self.__altitudeSorterUi.btnbx_CancelOK.rejected.connect(self.cancelOk_btn_reject)

    def cancelOk_btn_accept(self):
        self.parent.behavior_order = True
        self.close()

# Dialog box for entering user-defined parameters
# for Latitude Longitude behaviors
class LatitudeLongitudeDialog(BehaviorDialog):

    def __init__(self, sc_state, parent_dialog):
        BehaviorDialog.__init__(self, sc_state, parent_dialog)

        self.__latitudeLongitudeUi = Ui_latitudeLongitudeDialog()
        self.__latitudeLongitudeUi.setupUi(self)

        #slots
        self.__latitudeLongitudeUi.btnbx_CancelOK.accepted.connect(self.cancelOk_btn_accept)
        self.__latitudeLongitudeUi.btnbx_CancelOK.rejected.connect(self.cancelOk_btn_reject)

    def cancelOk_btn_accept(self):
        lat = self.__latitudeLongitudeUi.doubleSpinBox_Lat.value()
        lon = self.__latitudeLongitudeUi.doubleSpinBox_Lon.value()

        self.parent.behavior_order = ( lat, lon )
        self.close()


# Dialog box for entering user-defined parameters
# for Intercept behaviors
class InterceptDialog(BehaviorDialog):

    def __init__(self, sc_state, parent_dialog):
        BehaviorDialog.__init__(self, sc_state, parent_dialog)

        self.__interceptUi = Ui_interceptDialog()
        self.__interceptUi.setupUi(self)

        #slots
        self.__interceptUi.btnbx_CancelOK.accepted.connect(self.cancelOk_btn_accept)
        self.__interceptUi.btnbx_CancelOK.rejected.connect(self.cancelOk_btn_reject)

    def cancelOk_btn_accept(self):
        self.parent.behavior_order = self.__interceptUi.spinBox_TargetID.value()
        self.close()

